############################################################################################
#
# RevBayes Validation Test n°2: Occurrence birth-death process
#
# Model: Tree is drawn from a constant-rate fossilized birth-death process with occurrences.
#
#
# authors: Jérémy Andréoletti, 
#
############################################################################################

seed(1234)

#######################
# Reading in the Data #
#######################

#dataset_nbs_path <- args[1]
#dataset_index <- args[2]

#dataset_nbs <- readMatrix(dataset_nbs_path, delimiter=",")
#dataset_nb <- dataset_nbs[1][dataset_index]

dataset_nb <- args[1]
dir = "dataset-validation-2-1000nt/dataset" + dataset_nb + "/"

taxa <- readTaxonData(dir + "data_taxa.csv")
n_taxa <- taxa.size()
n_fossils <- 0
for (taxon in taxa){
  if (taxon.getMaxAge() > 0) { n_fossils += 1 }
}

# Load the true number of hidden lineages
max_Hidden_Lineages <- readTable("Max_Hidden_Diversity.csv", delimiter=",", header=TRUE)
#max_Hidden_Lineages <- readMatrix("Max_Hidden_Diversity.csv", delimiter=",")
if (max_Hidden_Lineages[dataset_nb+1][1] != dataset_nb){
     print ("WARNING : wrong dataset number, " + max_Hidden_Lineages[dataset_nb+2][1] + " instead of " + dataset_nb)
}
N <- int(max_Hidden_Lineages[dataset_nb+1][2]) + 20

# Load the true mutation rate
mutation_rates <- readTable("Mutation_Rates.csv", delimiter=",", header=TRUE)
if (mutation_rates[dataset_nb+1][1] != dataset_nb){
     print ("WARNING : wrong dataset number, " + mutation_rates[dataset_nb+2][1] + " instead of " + dataset_nb)
}
alpha <- mutation_rates[dataset_nb+1][2]

print("\n\nDataset " + dataset_nb + " with " + n_taxa + " taxa, N = " + N + " and alpha = " + alpha + "\n\n")

### Read in data
if (n_taxa > 1){
     sequences <- readDiscreteCharacterData(dir + "data_seq.nex")
     if (readTable(dir + "data_occurrences.csv", delimiter=";").size()>0){
          occurrence_ages <- readTable(dir + "data_occurrences.csv", delimiter=";")[1]
          occ <- TRUE
     }else{
          occ <- FALSE
     }
     # parameters = readDataDelimitedFile(file=dir + "params.csv", delimiter=";")
     # tree <- readTrees(file=dir + "tree_full.nw")[1]

     # Add Missing Taxa
     sequences.addMissingTaxa( taxa )

     ### Set priors

     ## Tree-prior distribution : occurrece birth-death process

     # OBDP parameters priors
     mu ~ dnExp(1.0)
     lambMinusMu ~ dnExp(100.0)
     lambda := lambMinusMu + mu
     psi ~ dnExp(5.0)
     omega ~ dnExp(5.0)
     rho ~ dnUnif(0.8, 1.0)
     rm ~ dnUnif(0.0, 1.0)
     cond <- "survival2"
     useMt <- FALSE
     verbose <- FALSE

     start_time_min <- 1.0
     for (nb in 1:n_taxa){
          start_time_min <- max(v(start_time_min, taxa[nb].getMaxAge()))
     }
     if (occ){
          start_time_min <- max(v(start_time_min, max(occurrence_ages)))
     }
     start_time ~ dnUnif(abs(start_time_min), 5.0)
     #start_time.setValue(start_time_min + 0.001)

     # Initialise my move index
     mvi = 1

     # Create some moves that change the stochastic variables
     moves[mvi++] = mvScale(lambMinusMu, lambda=7.0, weight=1.0, tune=TRUE)
     moves[mvi++] = mvScale(mu, lambda=3.0, weight=1.0, tune=TRUE)
     moves[mvi++] = mvScale(psi, lambda=3.0, weight=1.0, tune=TRUE)
     moves[mvi++] = mvScale(omega, lambda=5.0, weight=1.0, tune=TRUE)

     moves[mvi++] = mvSlide(rho, delta=1.0,  weight=1.0, tune=TRUE)
     moves[mvi++] = mvSlide(rm, delta=1.0,  weight=1.0, tune=TRUE)
     moves[mvi++] = mvSlide(start_time, delta=100.0,  weight=0.5, tune=TRUE)

     if (occ){
          obd_tree ~ dnOBDP( originAge=start_time,
                             lambda=lambda,
                             mu=mu, 
                             psi=psi, 
                             omega=omega, 
                             rho=rho, 
                             r=rm, 
                             maxHiddenLin=N, 
                             condition=cond, 
                             taxa=taxa,
                             occurrence_ages=occurrence_ages, 
                             useMt=useMt,
                             verbose=verbose)
     }else{               
          obd_tree ~ dnOBDP( originAge=start_time,
                             lambda=lambda,
                             mu=mu, 
                             psi=psi, 
                             omega=omega, 
                             rho=rho, 
                             r=rm, 
                             maxHiddenLin=N, 
                             condition=cond, 
                             taxa=taxa,
                             useMt=useMt,
                             verbose=verbose)
     }

     # while (obd_tree.rootAge() > 5.0){
     #      if (occ){
     #           obd_tree ~ dnOBDP( originAge=start_time,
     #                              lambda=lambda,
     #                              mu=mu, 
     #                              psi=psi, 
     #                              omega=omega, 
     #                              rho=rho, 
     #                              r=rm, 
     #                              maxHiddenLin=N, 
     #                              condition=cond, 
     #                              taxa=taxa,
     #                              occurrence_ages=occurrence_ages, 
     #                              useMt=useMt,
     #                              verbose=verbose)
     #      }else{               
     #           obd_tree ~ dnOBDP( originAge=start_time,
     #                              lambda=lambda,
     #                              mu=mu, 
     #                              psi=psi, 
     #                              omega=omega, 
     #                              rho=rho, 
     #                              r=rm, 
     #                              maxHiddenLin=N, 
     #                              condition=cond, 
     #                              taxa=taxa,
     #                              useMt=useMt,
     #                              verbose=verbose)
     #      }
     # }
     # start_time.setValue((max(v(obd_tree.rootAge(),start_time_min))+5.0)/2)

     fossils = obd_tree.getFossils()
     if (fossils.size()>0){
          for(i in 1:fossils.size())
          {
               t[i] := tmrca(obd_tree, clade(fossils[i]))

               a_i = fossils[i].getMinAge()
               b_i = fossils[i].getMaxAge()

               print("a_i = " + a_i + ", b_i = " + b_i)

               if (a_i == b_i){
                    #F[i] ~ dnPointMass(t[i] - a_i)
                    F[i] ~ dnUniform(t[i] - b_i - 0.001, t[i] - a_i + 0.001)
               } else{
                    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
               }
               F[i].clamp( 0 )
          }
     }

     ## Moves to the phylogeny, mainly from April Wright (https://rdrr.io/github/wrightaprilm/Systematics2020/f/vignettes/05_models/index.Rmd)
     if (n_taxa > 2){
          # Topology moves
          moves[mvi++] = mvNarrow(obd_tree, weight=n_taxa/3.0)                  # Nearest-neighbor interchange without changing the node ages
          moves[mvi++] = mvFNPR(obd_tree, weight=n_taxa/3.0)                    # Fixed-node-height subtree-prune and regrafting
          moves[mvi++] = mvGPR(obd_tree, weight=n_taxa/30.0)                    # Metropolized-Gibbs subtree-prune and regrafting
          moves[mvi++] = mvCollapseExpandFossilBranch(obd_tree, start_time, weight=10*n_fossils/2.0)  # Exchange fossils between tips and sampled ancestors
          moves[mvi++] = mvNNI(obd_tree, weight=n_taxa/10.0)                    # Nearest-neighbor interchange with changing the node ages
     }
     
     # Dating moves
     moves[mvi++] = mvRootTimeSlideUniform(obd_tree, start_time, weight=5.0)    # Slide the root
     if (n_taxa > 2){
          moves[mvi++] = mvNodeTimeSlideBeta(obd_tree, delta=1.0, weight=n_taxa/2.0, tune=TRUE)    # Slide the ages of the internal nodes
     }
     # if (n_taxa-n_fossils == 2){
     #      if (n_fossils > 0){
     #           moves[mvi++] = mvSubtreeScale(obd_tree, weight=n_taxa/5.0)       # Slide the ages of the internal nodes
     #      }
     # } else {
     #      moves[mvi++] = mvNodeTimeSlideUniform(obd_tree, weight=n_taxa/2.0)    # Slide the ages of the internal nodes
     #      moves[mvi++] = mvSubtreeScale(obd_tree, weight=n_taxa/5.0)            # Slide the ages of the internal nodes
     # }
     print(moves)
     

     ## Strict clock model
     #alpha ~ dnExponential(20.0)
     #moves[mvi++] = mvScale(alpha, lambda=1.0, weight=5.0, tune=TRUE)
     #moves[mvi++] = mvRateAgeBetaShift(tree=obd_tree, rates=alpha, weight=5.0, tune=TRUE)     # Changes node ages and branch rates jointly, so that the effective branch length remains the same

     ## Nucleotide sequence evolution : JC69 model
     Q := fnJC(4)
     seq ~ dnPhyloCTMC(tree=obd_tree, branchRates=3*alpha, Q=Q, type="DNA")
     seq.clamp(sequences)


     #############
     # THE Model #
     #############

     # We define our model.
     # We can use any node of our model as a handle, here we chose to use the tree.
     mymodel = model(obd_tree)

     # Number of generations
     G = 10000

     restart_checkp = FALSE
     #directory = "output_validation_2_N" + N + "_G" + G + "/"
     directory = "G" + G + "_output_validation/"
     if (restart_checkp) {
          directory = "G" + G + "_output_validation/"
     }

     monitors[1] = mnStochasticVariable(filename=directory + "mcmc_OBDP_dataset" + dataset_nb + ".out", printgen=5)
     monitors[2] = mnFile(filename=directory + "mcmc_OBDP_dataset" + dataset_nb + ".trees", printgen=5, obd_tree)
     monitors[3] = mnScreen(printgen=50, start_time)
     print("my model ok")
     # mymcmc = mcmc(mymodel, monitors, moves, moveschedule="single")
     mymcmc = mcmc(mymodel, monitors, moves)

     # Restart from checkpoint or run a burnin
     iter = 0
     if (restart_checkp) {
          mymcmc.initializeFromCheckpoint(checkpointFile=directory + "mcmc_OBDP_dataset" + dataset_nb + ".state")
          iter = readTable(directory + "mcmc_OBDP_dataset" + dataset_nb + "_mcmc.state", delimiter=" ")[1][3]  # Checkpoint iterations
     }else{
          mymcmc.burnin(generations=1000, tuningInterval=50)
     }

     # Run the MCMC and record executation time
     time0 = time()
     mymcmc.run(generations=G - iter, checkpointInterval=50, checkpointFile=directory + "mcmc_OBDP_dataset" + dataset_nb + ".state")
     write((time()-time0)/1000, filename=directory + "mcmc_OBDP_dataset" + dataset_nb + ".duration")

     # check the performance of the MCMC/moves
     mymcmc.operatorSummary()

     # Read in the tree trace and construct the maximum clade credibility (MCC) tree #
     trace = readTreeTrace(directory + "mcmc_OBDP_dataset" + dataset_nb + ".trees")

     # Summarize tree trace and save MCC tree to file
     mccTree(trace, file=directory + "mcmc_OBDP_dataset" + dataset_nb + ".tre" )
}


# you may want to quit RevBayes now
q()
